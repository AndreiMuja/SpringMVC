/*
 * This file is generated by jOOQ.
 */
package org.jooq.test.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.test.Indexes;
import org.jooq.test.Keys;
import org.jooq.test.SpaceInfo;
import org.jooq.test.tables.records.PlanetsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Planets extends TableImpl<PlanetsRecord> {

    private static final long serialVersionUID = -2057608915;

    /**
     * The reference instance of <code>space_info.planets</code>
     */
    public static final Planets PLANETS = new Planets();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlanetsRecord> getRecordType() {
        return PlanetsRecord.class;
    }

    /**
     * The column <code>space_info.planets.id</code>.
     */
    public final TableField<PlanetsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>space_info.planets.planet_name</code>.
     */
    public final TableField<PlanetsRecord, String> PLANET_NAME = createField(DSL.name("planet_name"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>space_info.planets.mission</code>.
     */
    public final TableField<PlanetsRecord, String> MISSION = createField(DSL.name("mission"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>space_info.planets.launch</code>.
     */
    public final TableField<PlanetsRecord, LocalDate> LAUNCH = createField(DSL.name("launch"), org.jooq.impl.SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>space_info.planets.iau_pattern</code>.
     */
    public final TableField<PlanetsRecord, String> IAU_PATTERN = createField(DSL.name("iau_pattern"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>space_info.planets.moons</code>.
     */
    public final TableField<PlanetsRecord, String> MOONS = createField(DSL.name("moons"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * Create a <code>space_info.planets</code> table reference
     */
    public Planets() {
        this(DSL.name("planets"), null);
    }

    /**
     * Create an aliased <code>space_info.planets</code> table reference
     */
    public Planets(String alias) {
        this(DSL.name(alias), PLANETS);
    }

    /**
     * Create an aliased <code>space_info.planets</code> table reference
     */
    public Planets(Name alias) {
        this(alias, PLANETS);
    }

    private Planets(Name alias, Table<PlanetsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Planets(Name alias, Table<PlanetsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Planets(Table<O> child, ForeignKey<O, PlanetsRecord> key) {
        super(child, key, PLANETS);
    }

    @Override
    public Schema getSchema() {
        return SpaceInfo.SPACE_INFO;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PLANETS_IAU_PATTERN_UNIQUE, Indexes.PLANETS_PLANET_NAME_UNIQUE, Indexes.PLANETS_PRIMARY);
    }

    @Override
    public Identity<PlanetsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PLANETS;
    }

    @Override
    public UniqueKey<PlanetsRecord> getPrimaryKey() {
        return Keys.KEY_PLANETS_PRIMARY;
    }

    @Override
    public List<UniqueKey<PlanetsRecord>> getKeys() {
        return Arrays.<UniqueKey<PlanetsRecord>>asList(Keys.KEY_PLANETS_PRIMARY, Keys.KEY_PLANETS_PLANET_NAME_UNIQUE, Keys.KEY_PLANETS_IAU_PATTERN_UNIQUE);
    }

    @Override
    public Planets as(String alias) {
        return new Planets(DSL.name(alias), this);
    }

    @Override
    public Planets as(Name alias) {
        return new Planets(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Planets rename(String name) {
        return new Planets(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Planets rename(Name name) {
        return new Planets(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, LocalDate, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
